
# Change summary
# - Wrote syntax rules based on Walter Church's internal set, then re-wrote
#   some of them based on: https://www-01.ibm.com/software/awdtools/hlasm/library.html
#   (site last updated July 2015) High Level Assembler for z/OS & z/VM & z/VSE
#   Language Reference Version 1 Release 6 SC26-4940-07
# - This grammar assumes the standard field boundaries in statements:
#   - begin column        = 1
#   - continue column     = 16
#   - end column          = 71
#   - continuation column = 72
#   - identification sequence field = 73-80

# After editing this file, CTL-SHIFT-F5 or C-S-P window:reload to update the active editor with the revised grammar.
# editor:log-cursor-scope to see which selectors (example: comment.block.zvmasm) the grammar applies at the cursor's location.
# Behavioral notes
# - If a line matches line-too-long, it does NOT match others like uncontinued-statement (provable using editor:log-cursor-scope)

'scopeName': 'source.zvmasm'
'name': 'z/VM assembler'
'fileTypes': ['ASM', 'asm','assemble','macro','repos','s']

'patterns': [
    { 'include': '#line-too-long-rule' },
    { 'include': '#continuation-line-rule' },
    { 'include': '#continuation-remarks-rule' },
    { 'include': '#uncontinued-comment-rule' },
    { 'include': '#macro-rule' },
    # TODO Break the uncontinued-statement-rule into multiple smaller parts
    # { 'include': '#uncontinued-statement-rule' },
    { 'include': '#register-equate-rule' },
    { 'include': '#sequence-number-rule' },
    { 'include': '#declare-rule' },
    { 'include': '#register-variable-rule' },
    { 'include': '#single-quoted-string-rule' },
    { 'include': '#parenthesis-rule' }
]

'repository': {
    'line-too-long-rule': {
      # Anything over 80 characters makes line come up red except 8 trailing digits
      'match': '.*(?<=.{72})(([^0-9 \\r\\n]+)|([0-9 \\r\\n]{8}.+))'
      'name': 'invalid.illegal.zvmasm'
    },
    'sequence-number-rule': {
      # This only takes into consideration 8 digits [0-9] after 72 characters
      'match': '(?<=.{72})[0-9]{8}\\n'
      'name': 'comment.line.zvmasm'
    },
    'register-variable-rule': {
      'match': '\\b([R|r]([0-9]|1[0-5]))\\b'
      'name':  'variable.other.zvmasm'
    },
    'register-equate-rule': {
      # Register matching not included as a capture group 'cus it will create a conflict with register-variable-rule.
      # Let it capture registers. Additionally starting the match from EQU expands the highlighting scope of this pattern.
      # Also not included string matching as a 4th capturing group for the same reason
      'match': '(\\w+\\s+)((?i)EQU\\s+)([^\\s\']*)\\b'
      'captures':
          '1':
              'name': 'variable.other.zvmasm'
          '2':
              'name': 'storage.type.zvmasm'
          '3':
              'name': 'constant.numeric.zvmasm'
      'name': 'keyword.operator.zasm'
    },
    'single-quoted-string-rule': {
      'begin': '\''
      'beginCaptures':
          '0':
              'name': 'string.quoted.single.zvmasm'
      'end': '\''
      'endCaptures':
          '0':
              'name': 'string.quoted.single.zvmasm'
      'contentName': 'string.quoted.single.zvmasm'
    },
    'uncontinued-comment-rule': {
      # Handles normal comments and macro comments, which are permitted in open code
      'match': '^[.]?[*].*'
      'name': 'comment.line.zvmasm'
    },
    'continuation-remarks-rule': {
      # Essentially no wiggle room in the manual here: >15 spaces to start means it's remarks.
      # It's technically permitted that the operation field could begin 16 on a non-continuation line, so this CAN match spuriously
      # A single pattern match will not allow matching patter across multiple lines.
      # For detailed explaination refer https://github.com/atom/first-mate/issues/57#issuecomment-137492363
      'begin': '(\\*\\n)'
      'beginCaptures':
          '1':
              'name': 'comment.character.zvmasm'
      'end': '[\\s]{16,}.*'
      # Let the source handle the endCaptures
      'name': 'comment.line.zvmasm'
    },
    'continuation-line-rule': {
      # A single pattern match will not allow matching patter across multiple lines.
      # For detailed explaination refer https://github.com/atom/first-mate/issues/57#issuecomment-137492363
      'begin': '(\\*\\n)'
      'beginCaptures':
          '1':
              'name': 'comment.character.zvmasm'
      'end': '([\\s]{0,15}([A-Za-z0-9@$#_+-,=.*()\'\/&]+)([ ]+.*)?)'
      # Let the source handle the endCaptures
    },
    'uncontinued-statement-rule': {
      # TODO improve handling of smaller and more particular cases
      # Structure: line-begin, optional label, required space(s), required operation, optional portion
      #            optional portion: required space(s), operands (optional to keep portion optional), space, remarks
      'match': '^([A-Za-z][A-Za-z0-9@$#_]*)?([ ]+)([A-Za-z][A-Za-z0-9]*)([ ]+[^ ]+)?(.*)'
      'captures':
          '1':
              'name': 'entity.name.tag.zasm'
          # 2 = required spaces; assign something like invalid.illegal to see them for debugging
          '3':
              'name': 'keyword.control.zvmasm'
          #'4': # operands, leave as normal source by default
          '5': # remarks
              'name': 'comment.line.zvmasm'
    },
    'macro-rule': {
        'begin': '((?i)MACRO)'
        'beginCaptures':
            '0':
                'name': 'meta.entity.name.zvmasm'
        'patterns': [
            { include = "$self" },
            {
                'match': '\\.\\*.*\\n'
                'name': 'comment.line.zvmasm'
                'comment': 'comments'
            },
            {
                'match': '(\\.)(\\w+)'
                'captures':
                    '2':
                        'name': 'variable.other.zvmasm'
                'comment': 'go-to variables'
            }
        ]
        'end': '((?i)MEND)'
        'endCaptures':
            '0':
                'name': 'meta.entity.name.zvmasm'
    }
    'declare-rule': {
      # vs original, made DC/DS case-insensitive which pushed capture group numbers up 1
      'match': '\\b((?i)D[C|S])[\\s]*([0-9]*|\\(.*\\))([A-Z0-9][DUBH]?)(L?[0-9]*)(\'.*\'|\\s)([^\\s]*)([^@\\n]*)'
      'captures':
          '1':
              'name': 'storage.type.zvmasm'
          '2':
              'name': 'storage.type.zvmasm'
          '3':
              'name': 'storage.type.zvmasm'
          '5':
              'name': 'string.quoted.single.zvmasm'
          '6':
              'name': 'variable.parameter.zvmasm'
          '7':
              'name': 'comment.line.zvmasm'
      # 'name': 'keyword.operator.zvmasm'
    },
    'parenthesis-rule': {
        'begin': '\\('
        'beginCaptures':
            '0':
                'name': 'character.parenthesis.zvmasm'
        'end': '\\)'
        'endCaptures':
            '0':
                'name': 'character.parenthesis.zvmasm'
        'patterns': [
            { include = "$self" },
        ]
    }
}


#https://www.sitepoint.com/how-to-write-a-syntax-highlighting-package-for-atom/
#https://manual.macromates.com/en/language_grammars
#http://www.regular-expressions.info/characters.html
